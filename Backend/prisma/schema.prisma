// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Company owns FAQs and Sessions
model Company {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  faqs      FAQ[]
  sessions  Session[]
  companyProfile String?  // auto-generated condensed FAQ context
}

// Each support session belongs to a company
model Session {
  id                String   @id @default(cuid())
  user              String
  status            String   @default("active") // "active" | "escalated" | "closed"
  escalationReason  String?  // 'low_confidence' | 'out_of_scope' | 'policy' | 'tool_error'
  sessionConfidence Float    @default(1.0)
  confidences       Float[]  @default([]) // Rolling history of turn confidences
  badTurns          Int      @default(0)
  goodTurns         Int      @default(0)
  oosStreak         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  companyId         String
  company           Company  @relation(fields: [companyId], references: [id])
  messages          Message[]
  summary           String?
  @@index([companyId, status, updatedAt])
}


// Each message belongs to a session
model Message {
  id         String    @id @default(cuid())
  sessionId  String
  sender     String     // "user" | "orion" | "system"
  text       String
  confidence Float?     // Turn confidence score
  mode       String?    // "confident" | "cautious" | "unsure" | "escalate"
  createdAt  DateTime   @default(now())
  session    Session    @relation(fields: [sessionId], references: [id])
  @@index([sessionId, createdAt])
}

// FAQs linked to companies (knowledge base per company)
model FAQ {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  question    String
  answer      String
  tags        String[]
  embedding   Float[]  // Gemini vector (768 dims) for vector search
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
