/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardSetupRouteImport } from './routes/dashboard/setup'
import { Route as DashboardSettingsRouteImport } from './routes/dashboard/settings'
import { Route as DashboardFaqRouteImport } from './routes/dashboard/faq'
import { Route as DashboardEscalationsRouteImport } from './routes/dashboard/escalations'
import { Route as DashboardConversationsRouteImport } from './routes/dashboard/conversations'
import { Route as DashboardAnalyticsRouteImport } from './routes/dashboard/analytics'
import { Route as DashboardConversationsIndexRouteImport } from './routes/dashboard/conversations/index'
import { Route as DashboardConversationsIdRouteImport } from './routes/dashboard/conversations/$id'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSetupRoute = DashboardSetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardFaqRoute = DashboardFaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardEscalationsRoute = DashboardEscalationsRouteImport.update({
  id: '/escalations',
  path: '/escalations',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardConversationsRoute = DashboardConversationsRouteImport.update({
  id: '/conversations',
  path: '/conversations',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardAnalyticsRoute = DashboardAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardConversationsIndexRoute =
  DashboardConversationsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardConversationsRoute,
  } as any)
const DashboardConversationsIdRoute =
  DashboardConversationsIdRouteImport.update({
    id: '/$id',
    path: '/$id',
    getParentRoute: () => DashboardConversationsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/conversations': typeof DashboardConversationsRouteWithChildren
  '/dashboard/escalations': typeof DashboardEscalationsRoute
  '/dashboard/faq': typeof DashboardFaqRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/setup': typeof DashboardSetupRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/conversations/$id': typeof DashboardConversationsIdRoute
  '/dashboard/conversations/': typeof DashboardConversationsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/escalations': typeof DashboardEscalationsRoute
  '/dashboard/faq': typeof DashboardFaqRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/setup': typeof DashboardSetupRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/conversations/$id': typeof DashboardConversationsIdRoute
  '/dashboard/conversations': typeof DashboardConversationsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/conversations': typeof DashboardConversationsRouteWithChildren
  '/dashboard/escalations': typeof DashboardEscalationsRoute
  '/dashboard/faq': typeof DashboardFaqRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/setup': typeof DashboardSetupRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/conversations/$id': typeof DashboardConversationsIdRoute
  '/dashboard/conversations/': typeof DashboardConversationsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/analytics'
    | '/dashboard/conversations'
    | '/dashboard/escalations'
    | '/dashboard/faq'
    | '/dashboard/settings'
    | '/dashboard/setup'
    | '/dashboard/'
    | '/dashboard/conversations/$id'
    | '/dashboard/conversations/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/analytics'
    | '/dashboard/escalations'
    | '/dashboard/faq'
    | '/dashboard/settings'
    | '/dashboard/setup'
    | '/dashboard'
    | '/dashboard/conversations/$id'
    | '/dashboard/conversations'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/analytics'
    | '/dashboard/conversations'
    | '/dashboard/escalations'
    | '/dashboard/faq'
    | '/dashboard/settings'
    | '/dashboard/setup'
    | '/dashboard/'
    | '/dashboard/conversations/$id'
    | '/dashboard/conversations/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/setup': {
      id: '/dashboard/setup'
      path: '/setup'
      fullPath: '/dashboard/setup'
      preLoaderRoute: typeof DashboardSetupRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/faq': {
      id: '/dashboard/faq'
      path: '/faq'
      fullPath: '/dashboard/faq'
      preLoaderRoute: typeof DashboardFaqRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/escalations': {
      id: '/dashboard/escalations'
      path: '/escalations'
      fullPath: '/dashboard/escalations'
      preLoaderRoute: typeof DashboardEscalationsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/conversations': {
      id: '/dashboard/conversations'
      path: '/conversations'
      fullPath: '/dashboard/conversations'
      preLoaderRoute: typeof DashboardConversationsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/analytics': {
      id: '/dashboard/analytics'
      path: '/analytics'
      fullPath: '/dashboard/analytics'
      preLoaderRoute: typeof DashboardAnalyticsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/conversations/': {
      id: '/dashboard/conversations/'
      path: '/'
      fullPath: '/dashboard/conversations/'
      preLoaderRoute: typeof DashboardConversationsIndexRouteImport
      parentRoute: typeof DashboardConversationsRoute
    }
    '/dashboard/conversations/$id': {
      id: '/dashboard/conversations/$id'
      path: '/$id'
      fullPath: '/dashboard/conversations/$id'
      preLoaderRoute: typeof DashboardConversationsIdRouteImport
      parentRoute: typeof DashboardConversationsRoute
    }
  }
}

interface DashboardConversationsRouteChildren {
  DashboardConversationsIdRoute: typeof DashboardConversationsIdRoute
  DashboardConversationsIndexRoute: typeof DashboardConversationsIndexRoute
}

const DashboardConversationsRouteChildren: DashboardConversationsRouteChildren =
  {
    DashboardConversationsIdRoute: DashboardConversationsIdRoute,
    DashboardConversationsIndexRoute: DashboardConversationsIndexRoute,
  }

const DashboardConversationsRouteWithChildren =
  DashboardConversationsRoute._addFileChildren(
    DashboardConversationsRouteChildren,
  )

interface DashboardRouteRouteChildren {
  DashboardAnalyticsRoute: typeof DashboardAnalyticsRoute
  DashboardConversationsRoute: typeof DashboardConversationsRouteWithChildren
  DashboardEscalationsRoute: typeof DashboardEscalationsRoute
  DashboardFaqRoute: typeof DashboardFaqRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardSetupRoute: typeof DashboardSetupRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardAnalyticsRoute: DashboardAnalyticsRoute,
  DashboardConversationsRoute: DashboardConversationsRouteWithChildren,
  DashboardEscalationsRoute: DashboardEscalationsRoute,
  DashboardFaqRoute: DashboardFaqRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardSetupRoute: DashboardSetupRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
